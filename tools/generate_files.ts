import {readFileSync, writeFileSync} from 'fs'
import {JSDOM} from 'jsdom'
import {presets_display_order} from '../src/configResources'
import {ghReleaseAsset} from '../src/CustomFolderResources/CustomFolderResources'

const index_by_name = (accumulator: {}, asset: ghReleaseAsset) => {
	return {...accumulator, [asset.name]: asset}
}

const main = async () => {
	// get descriptions for presets

	// official download page has extra documentation for very low present versus:
	// alternate source https://github.com/mastercomfig/mastercomfig/blob/8.102.3/docs/contributing.md#Presets

	const downloadPage = new JSDOM(readFileSync(
		'../third_party/mastercomfig.github.io/download.html')).window.document

	const presetsEl = downloadPage.querySelector('#presets')

	const ultra = presetsEl.querySelector('#ultra p').innerHTML,
		high = presetsEl.querySelector('#high p').innerHTML,
		mediumHigh = presetsEl.querySelector('#medium-high p').innerHTML,
		medium = presetsEl.querySelector('#medium p').innerHTML,
		mediumLow = presetsEl.querySelector('#medium-low p').innerHTML,
		low = presetsEl.querySelector('#low p').innerHTML,
		veryLow = presetsEl.querySelector('#very-low p').innerHTML

	const presetsDesc = [
		ultra,
		high,
		mediumHigh,
		medium,
		mediumLow,
		low,
		veryLow,
	].map((i, index) => {
		return {
			name: presets_display_order[index],
			desc_en: i,
		}
	}).reduce(index_by_name, {})

	// recommended addons for presets
	// recommended preset for new installs
	// preset human names e.g. very-low => Very Low

	let downloadJS = readFileSync(
		'../third_party/mastercomfig.github.io/js/download.js').toString()

	if (globalThis.ex_presets) throw 'err'
	if (globalThis.ex_recommendedAddons) throw 'err'
	if (globalThis.ex_selectedPreset) throw 'err'

	downloadJS = downloadJS.replace('var storage = localStorage;',
		`globalThis.ex_presets = presets;
		globalThis.ex_recommendedAddons = recommendedAddons;
		globalThis.ex_selectedPreset = selectedPreset;
		return`,
	)

	if (globalThis.$) throw 'err'
	globalThis.$ = (a) => {
		eval(a)()
	}

	if (globalThis.document) throw 'err'
	globalThis.document = {
		getElementById: () => {
		},
	}
	eval(downloadJS)

	const presetsEn = {}
	const recommendedAddons = {}

	for (const [key, value] of globalThis.ex_presets.entries()) {
		presetsEn[key] = value
	}

	for (const [key, value] of globalThis.ex_recommendedAddons.entries()) {
		recommendedAddons[key] = value
	}

	const output = {
		autogenerated_presets_desc_en: presetsDesc,
		autogenerated_presets_en: presetsEn,
		autogenerated_recommended_addons: recommendedAddons,
		autogenerated_recommended_preset: globalThis.ex_selectedPreset,
	}

	console.log(output)

	let msg = `// This file is autogenerated by tools/generate_data\r\n`
	msg += `// from https://github.com/mastercomfig/mastercomfig.github.io\r\n`
	msg += `\r\n`
	msg += `export const autogenerated_data = `

	writeFileSync('./autogenerated_data.ts', msg + JSON.stringify(output, null, '\t'))
}

main()